source ~/.profile

## for debugging purpose use gcc or g++

export CC=clang
export CFLAGS="-ggdb3 -O0 -std=c11 -latomic -lpthread -lm -ldl -fcolor-diagnostics"
## cs50 library for cs50 psets

alias node="env NODE_NO_READLINE=1 rlwrap node"

# SAmple command
# clang-check -analyze hell.cpp --
alias analyzeCC='clang++ --analyze -std=c++14 -lc++abi -latomic -Xanalyzer -analyzer-output=text -fcolor-diagnostics'
alias analyzeC='clang --analyze -std=c11 -latomic -Xanalyzer -analyzer-output=text -fcolor-diagnostics'

# valgrind check added
alias valC='valgrind --leak-check=full --show-reachable=yes --track-origins=yes'

alias asshole='unSetting ; defaultSetting'
alias mysql='mysql -u root -p'


alias cxx="clang++ -ggdb3 -O0 -std=c++14 -stdlib=libc++ -lc++abi -latomic -ldl -Werror -Wself-assign -pedantic-errors -Wextra-tokens -Wambiguous-member-template -Wbind-to-temporary-copy -fdiagnostics-print-source-range-info -fcolor-diagnostics -fdiagnostics-show-template-tree -ferror-limit=33 -ftemplate-backtrace-limit=13 -lpthread -l:libmagic.so.1"

alias cxxMinimal="clang++ -ggdb3 -O0 -std=c++14 -stdlib=libc++ -lc++abi -ldl -latomic -lpthread"

alias ccc="clang -ggdb3 -O0 -std=c11 -lm -ldl -lpthread -latomic -fcolor-diagnostics"

# gcc or g++ compiler
alias gcc="gcc -O0 -g -std=c11 -lm -ldl -lpthread -lcrypto -latomic -Wextra -Wshadow -Werror"
# for effective C++ optimization
alias gxx="g++ -O0 -g -std=c++14 -ldl -lpthread -lm -latomic -Wextra -Wshadow -pedantic"

alias ompC="ccc -fopenmp -pthread"
alias ompCC="cxx -fopenmp -pthread"


# configure clang++
# -lcrypto will be necessary some time
export CXX=clang++
export CXXFLAGS="-ggdb3 -O0 -std=c++14 -stdlib=libc++ -lc++abi -lm -ldl -latomic -Werror -Wself-assign -pedantic-errors -Wextra-tokens -Wambiguous-member-template -Wbind-to-temporary-copy -fdiagnostics-print-source-range-info -fcolor-diagnostics -fdiagnostics-show-template-tree -ferror-limit=33 -ftemplate-backtrace-limit=13 -lpthread -l:libmagic.so.1"

function reSetting()
{
  # c11
  export CC=clang
  export CFLAGS="-ggdb3 -O0 -std=c11 -lm -latomic -Wall -Werror -fcolor-diagnostics -pedantic-errors"

  # configure clang++
  export CXX=clang++
  export CXXFLAGS="-ggdb3 -O0 -std=c++14 -lc++abi -lm -lpthread -Werror -Wself-assign -Wall -pedantic-errors -Wextra-tokens -Wambiguous-member-template -Wbind-to-temporary-copy -fdiagnostics-print-source-range-info -fdiagnostics-show-template-tree -fcolor-diagnostics -ferror-limit=33 -ftemplate-backtrace-limit=13 -lpthread -l:libmagic.so.1"
}

function defaultSetting()
{
  export CC=gcc
  export CXX=g++
  export CPLUS_INCLUDE_PATH=/usr/include/c++
}


function unSetting()
{
  unset CC
  unset CFLAGS
  unset LDLIBS
  unset CXX
  unset CXXFLAGS
  unset CPLUS_INCLUDE_PATH
}

# few useful function
lxclean() { for f in *.tex; do rm -vf ${f%tex}{aux,bbl,blg,dvi,log,out,pdf,ps,toc}; done; }
pyclean() { find . -name "*.py[co]" -delete; }
svnclean() { find . -name .svn -exec rm -vrf {} +; }
termreset() { echo -ne "\033]0;Terminal\007"; }

# useful for NODEJS
alias npu='npm install -g npm'
alias npc='npm outdated -g --depth=0'
alias npmAll='npu;npc'

# build tool gradle

# Java Development Kit
export GRADLE_HOME=~/.myGradle
export PATH=$GRADLE_HOME/bin:$PATH


# alias YCMbuild='~/.vim/plugged/YouCompleteMe/install.py'
# alias YCMbuildCCJS='~/.vim/plugged/YouCompleteMe/install.py --clang-completer --tern-completer'

# to work with you may need to change eslintrc
# make sure to install all the modules
# npm install -g tern or in required directories
# npm install -g eslint eslint-plugin-import eslint-plugin-jsx-a11y eslint-plugin-react eslint-config-airbnb

# HTML5 TIDY
export TIDY_HOME=~/.tidy
export PATH=$TIDY_HOME/bin:$PATH

# HASKELL
# cabal install ghc-mod
export GHC_HOME=~/.cabal
export PATH=$GHC_HOME/bin:$PATH

# Apache2 web server
alias apacheRestart="sudo service apache2 restart"
alias apacheConfig="sudoedit /etc/apache2/apache2.conf"

alias fuck="sudo"

## Hail yaa
## mkdir -p ~/.fonts/
export fontInstall="sudo fc-cache -fv"
# hash misMatch
function hashMisMatch()
{
  sudo rm /var/lib/apt/lists/* -vf
  sudo apt-get update
}


build() {
  if (( "$#" < "1")); then
    echo something went wrong
    echo al least any source.cpp file needed
  else
    cxx $@
  fi
}

spl() {
  if (( "$#" < "1")); then
    echo something went wrong
  else
    cxxMinimal ~/algorism/stanfordCPPlib/StanfordCPPLib/*.cpp $@
  fi
}

splASAN() {
  if (( "$#" < "1")); then
    echo something went wrong
  else
    mASanCC ~/algorism/stanfordCPPlib/StanfordCPPLib/*.cpp $@
  fi
}


# tar xvf Python-3.5.2.tgz
# cd Python-3.5.2
# sudo apt-get build-dep python3
# sudo apt-get build-dep python3.X
# sudo apt-get install libssl-dev
# sudo apt-get install libbz2-dev
# sudo apt-get install libsqlite3-dev
# sudo apt-get install python3-tk tk
# ./configure --prefix=/home/hell/.myPython/
# make
# make test
# make install
# pip3 install --upgrade pip

# python3 ...what the hell


# test
# whereis pip
# whereis pip3
# which pip
# which pip3

# call this to instantiate locally installed python3
# this help you from using sudo while using pip pacakge manager
# unset PYTHONHOME

# pip install numpy scipy scikit-learn

export PY_HOME=~/.myPython
export PATH=$PY_HOME/bin:$PATH
export PATH=$PYTHONHOME/bin:$PATH
unset MANPATH # delete if you already modified MANPATH elsewhere in your config
export MANPATH="$PY_HOME/share/man:$(manpath)"
alias py3='python3'

## python2 is a legacy
# # this is for python2
# export PY_TWO_HOME=~/.myPythonTwo
# export PATH=$PY_TWO_HOME/bin:$PATH
#
# alias py2='python2'
#
# export C_INCLUDE_PATH="$PY_TWO_HOME/include"

# GIT margeing with master branch
# git remote add upstream http://masterBranchURL
# git remote add upstream

# Create a new directory and enter it
function md() {
  mkdir -p "$@" && cd "$@"
}


# Copy w/ progress
cp_p () {
  rsync -WavP --human-readable --progress $1 $2
}

# Paul Irish - credit
# get gzipped size
function gz() {
  echo "orig size    (bytes): "
  cat "$1" | wc -c
  echo "gzipped size (bytes): "
  gzip -c "$1" | wc -c
}

#### Notes
# Checkout LLVM, libc++ and libc++abi
# download source code llvm libcxx libcxxabi
# folder structure
# llvm/projects/libcxx
# llvm/projects/libcxxabi

# # Build libc++ with MSan:
# $ mkdir libcxx_msan && cd libcxx_msan
# $ echo $CC ; echo $CXX
# $ cmake <FULL_PATH_LOCATION_OF_LLVM_SOURCE> -DCMAKE_BUILD_TYPE=Release -DLLVM_USE_SANITIZER=Memory -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++
# $ asshole # my command though
# $ make cxx -j12
# # -j12 threads

# then copy lib and include folder ... .. think it

# one and only for MSAN Google memory sanitizer
openMSAN() {
  # MSan (Memory sanitizer)
  alias MSanC='ccc -fsanitize=memory -fsanitize-memory-track-origins=2 -fPIE -pie -fno-omit-frame-pointer'
  alias MSanCC='cxx -fsanitize=memory -fsanitize-memory-track-origins=2 -fPIE -pie -fno-omit-frame-pointer'
  alias mMSanCC='cxxMinimal -fsanitize=memory -fsanitize-memory-track-origins=2 -fPIE -pie -fno-omit-frame-pointer'


  # clang LLVM
  export MSANCLANG=~/.msanClang
  export PATH=~/.msanClang/bin:$PATH

  export LD_LIBRARY_PATH=~/.msanClang/lib
  export LIBRARY_PATH=~/.msanClang/lib
  export CPLUS_INCLUDE_PATH=~/.msanClang/include/c++/v1
  echo $(which clang)
}


closeMSAN(){
  # clang LLVM
  export CC=clang
  export CXX=clang++
  export LLVMCLANG=~/.myClang
  export PATH=~/.myClang/bin:$PATH
  export LD_LIBRARY_PATH=~/.myClang/lib
  export LIBRARY_PATH=~/.myClang/lib
  export CPLUS_INCLUDE_PATH=~/.myClang/include/c++/v1
  unset MANPATH
  export MANPATH="$LLVMCLANG/share/man:$(manpath)"
  echo $(which clang)
}


# alias for clang toolchain

# for npm
# Make sure to run
# mkdir "${HOME}/.npm-global"
# npm config set prefix '~/.npm-global'
# to see your current path
# npm config get prefix

# be sure to insotall dependencies first
# here webpack is the needy dependency of webpack-dev-server
# npm install -g webpack webpack-dev-server

# useful for code style
# pip3 install --user cppman

## fucking shit
stty -ixon
## clang


# color for vim script
if [ -n "$DISPLAY" -a "$TERM" == "xterm" ]; then
  export TERM=xterm-256color
fi

# OCLINT_HOME="/home/shelter/.oclint/build/oclint-0.10.2/"
# export PATH=$OCLINT_HOME/bin:$PATH

# pip bash completion start
_pip_completion()
{
  COMPREPLY=( $( COMP_WORDS="${COMP_WORDS[*]}" \
    COMP_CWORD=$COMP_CWORD \
    PIP_AUTO_COMPLETE=1 $1 ) )
}
complete -o default -F _pip_completion pip
# pip bash completion end


# Make sure to make .virtualenvs
export WORKON_HOME=$HOME/.virtualenvs
export PIP_VIRTUALENV_BASE=$HOME/.virtualenvs


# for Laravel
# download composer.phar locally and then use it globally in UNIX
# mkdir -p .composer/vendor/bin
# mv composer.phar .composer/vendor/bin/composer
# Install laravel Installer globally
# composer global require "laravel/installer"
export PATH="$PATH:$HOME/.composer/vendor/bin"

# node Development Kit
export NODE_HOME=~/.myNode

export PATH=$NODE_HOME/bin:$PATH

unset MANPATH

export MANPATH="$NODE_HOME/share/man:$(manpath)"


##### NPM development kit (OPTIONAL)
## for NPM ..you really don't need this if you install node
## as a local user
# touch .npmrc
# for more see my .npmrc file
# don't use nvm if you use this approach otherwise it will messed up
# to update npm
NPM_PACKAGES="${HOME}/.npm-global"

PATH="$NPM_PACKAGES/bin:$PATH"

# Unset manpath so we can inherit from /etc/manpath via the `manpath` command
unset MANPATH # delete if you already modified MANPATH elsewhere in your config
export MANPATH="$NPM_PACKAGES/share/man:$(manpath)"

# node_path global variable
export NODE_PATH="$HOME/.local/share/javascript:$NPM_PACKAGES:$NODE_HOME"


# Custom aliases folder dir
alias author="cd ~/Dropbox/FUNProgramming/ehz_notebook"
alias github="cd ~/Dropbox/FUNProgramming/"
# alias apublic="cd ~/vhosts/localhost/public/"
alias metacpp="cd ~/Dropbox/metadata/cppDeitel/Code_Examples"
alias free="free -h"

alias sag="sudo apt-get"
# alias update50="pullall"

alias dpkgOverwrite='sudo dpkg -i --force-overwrite'

# my nootbook
alias ehz="vim ~/Dropbox/FUNProgramming/ehz_notebook/ehzNOTEBOOK.md"

# My aliases
alias sqlite="sqlite3"
alias v="vim"
alias t="tmux"
alias vinp="vim --noplugin"
alias vinn="vim -u NONE"
alias c="clear"

# Updating process
alias update='sudo apt-get update'
alias upgrade='sudo apt-get upgrade'
# alias dist-upgrade='sudo apt-get dist-upgrade'

# all at once
alias pullall='update ; upgrade'
alias pullvim='vim -c PlugUpgrade +PlugUpdate'
alias myUpdate='asshole; pullall -y ; vim -c PlugUpdate +q +q'
alias housekeeping='sudo apt-get autoclean && sudo apt-get autoremove'

# git command aliases
alias Gadd="git add"
alias Gdiff="git diff"
alias Gshow="git show"
alias Gcommit="git commit"
alias Gstatus="git status"
alias Glog="git log"
alias Gpush="git push"
alias Gpull="git pull"
alias Gstash="git stash"


# custom configuration

# If not running interactively, don't do anything else
[ -z "$PS1" ] && return

PS1='\[\e[0;37m\]\u@\[\e[0;37m\]\h\[\e[0;40m\](\w):\[\e[0m\]$(__git_ps1 "(%s)") '

# If this is an xterm set the title to user@host(dir):
case "$TERM" in
  xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
  *)
    ;;
esac

# # configure prompt tail working directory
# if [ "$PS1" ]; then
#   export PS1="\[\e[0;46m\]\u@\[\e[0;46m\]\h\[\e[0;34m\](\W):\[\e[0m\] "
# fi

# # configure prompt present working directory
# if [ "$PS1" ]; then
#   export PS1="\[\e[0;46m\]\u@\[\e[0;46m\]\h\[\e[0;34m\](\w):\[\e[0m\] "
# fi


# set umask
umask 0077

# configure man
export MANSECT="3,2,1"

# Warning...Can cause trouble when compile system software

# protect user
alias cp="cp -i"
alias mv="mv -i"
alias rm="rm -i"

# convenience
alias ll="ls -l --color=auto"
alias gdb="gdb -q"

# allow core dumps
ulimit -c unlimited

# set editor
export EDITOR=vim

# linking personalized ~/.bash_profile with ~/.bashrc
if [ -f ~/.bashrc ]; then
  source ~/.bashrc
fi

# git bash completion
if [ -f ~/.git-completion.bash ]; then
  . ~/.git-completion.bash
fi
# export CLASSPATH=.:/usr/lib/spl.jar

# REFERNCE stackoveflow.. forget the link
# determine IP address
function myIP()
{
  vmm=
  if [ "$vmm" == "xen" ]; then
    # this is EC2, fetch public IP from AWS
    declare inet=$(wget --output-document=- --quiet --timeout=5 --tries=10 http://169.254.169.254/latest/meta-data/public-ipv4)
    declare regex='([0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3})'
  else
    # declare inet=$(ip -f inet addr show eth1 2> /dev/null | grep inet)
    declare inet=$(ip -f inet addr show eth0 2> /dev/null | grep inet)
    declare regex='inet ([0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3})'
  fi

  if [[ "$inet" == "" ]]; then
    declare addr="missing network adapter"
  elif [[ "$inet" =~ $regex ]]; then
    declare addr=${BASH_REMATCH[1]}
  else
    declare addr="no IP address"
  fi

  # display IP address
  if [ "$1" == "-xml" ]; then
    echo "<tool>IP address</tool>"
    echo "<txt>$addr</txt>"
  else
    echo $addr
  fi
}

# Run Dropbox indicator
function myDropbox()
{
  dropbox stop
  bash -c 'export DBUS_SESSION_BUS_ADDRESS="" && dropbox start -i'
}

# Xubuntu is the best ..lightwight and not messy
# # open your home directory
# # This only works in Xubuntu due to exo-open utilities
function ho()
{
  exo-open --launch FileManager
}

function tl()
{
  exo-open --launch TerminalEmulator
}

# sync with master branch
function gpum()
{
  git pull upstream master
}


# Remember This is built is with LLVM+Clang
# ASan (address sanitizer)
# HERE you go ...Google Standard Debugging
# SAN_OPTIONS as usual. However, if you built with -fsanitize=leak, put them in LSAN_OPTIONS
# For more see https://github.com/google/sanitizers/wiki
# C++ refactring for robustfulness

alias ASanC='ccc -fsanitize=address'
alias ASanCC='cxx -fsanitize=address'
alias mASanCC='cxxMinimal -fsanitize=address'

export ASAN_OPTIONS='stack_trace_format="[frame=%n, function=%f, location=%S]"'

# LSan (Leak sanitizer)
alias LSanC='ccc -fsanitize=leak'
alias LSanCC='cxx -fsanitize=leak'
alias mLSanCC='cxxMinimal -fsanitize=leak'

# TSan (Thread sanitizer)
# here cxx variable is declare
alias TSanC='ccc -fsanitize=thread'
alias TSanCC='cxx -fsanitize=thread'
alias mTSanCC='cxxMinimal -fsanitize=thread'


# UBSan (undefied behavior sanitizeer)
# This is huge ...See offcial LLVM documentation
alias UBSanC='ccc -fsanitize=undefined -fno-omit-frame-pointer'
alias UBSanCC='cxx -fsanitize=undefined -fno-omit-frame-pointer'
alias mUBSanCC='cxxMinimal -fsanitize=undefined -fno-omit-frame-pointer'

export UBSAN_OPTIONS=print_stacktrace=1

# Safe-Stack
alias SSanC='ccc -fsanitize=safe-stack'
alias SSanCC='cxx -fsanitize=safe-stack'
alias mSSanCC='cxxMinimal -fsanitize=safe-stack'

# control flow integrity
# for specific http://clang.llvm.org/docs/ControlFlowIntegrity.html
# reference# https://www.utdallas.edu/~zxl111930/spring2012/lec13.pdf
# http://www.eecs.harvard.edu/~greg/papers/cfiDataSandboxing.pdf
alias CFISanC='ccc -fsanitize=cfi -flto'
alias CFISanCC='cxx -fsanitize=cfi -flto'
alias mCFISanCC='cxxMinimal -fsanitize=cfi -flto'


# SQLite3 PATH...ANDROID SDK has default PATH also
# first path .. will go first as scripting language
export SQLITE=$HOME/.mySqlite
export PATH=$PATH:$SQLITE/bin

alias sqlite='$HOME/.mySqlite/bin/sqlite3'

# Android studio dependencies
# sudo apt-get install lib32ncurses5 lib32z1 lib32stdc++6

# path for android CLI (Software development kit)

#
# unzip android-studio-ide-145.3360264-linux.zip
# typically, by side-effects It wil create an android-studio folder
# mv android-studio /usr/local/
# rm -rf ~/.android ~/.AndroidStudio2.2

# Java Development Kit
export JAVA_HOME=~/.myJava
export PATH=$JAVA_HOME/bin:$PATH
export DERBY_HOME=$JAVA_HOME/db
export PATH=$DERBY_HOME/bin:$PATH

# Java Development Kit Integrated Development Environment
export INTELLJ_HOME=~/.myIntellJ
export PATH=$INTELLJ_HOME/bin:$PATH

alias intellij='~/.myIntellJ/bin/idea.sh'

unset MANPATH

export MANPATH="$JAVA_HOME/man:$(manpath)"


# clang LLVM
export LLVMCLANG=~/.myClang

export PATH=~/.myClang/bin:$PATH

export CPATH=~/.myClang/include
# On Mac OS X, replace LD_LIBRARY_PATH with DYLD_LIBRARY_PATH
export LD_LIBRARY_PATH=~/.myClang/lib

export LIBRARY_PATH=~/.myClang/lib

export CPLUS_INCLUDE_PATH=~/.myClang/include/c++/v1

unset MANPATH

export MANPATH="$LLVMCLANG/share/man:$(manpath)"

# you can export your path as per need
# or CPATH for more see official websites
# C_INCLUDE_PATH, CPLUS_INCLUDE_PATH

## GO dev
export GOROOT=$HOME/.go
export PATH=$PATH:$GOROOT/bin

## Cmake
export CMAKE_HOME=~/.cmake
export PATH=$CMAKE_HOME/bin:$PATH

unset MANPATH

export MANPATH="$CMAKE_HOME/man:$(manpath)"


# Usage: gcreate userName repoName "Description if any"
gitinit () {
  if [ "$#" == "4" ]; then
    echo
    echo $PWD
    echo "you are creating this folder a root of git repo"
    echo
    curl -u $1 https://api.github.com/user/repos -d "{\"name\": \"$2\", \"description\": \"$3\"}"
    git init
    touch .gitignore
    touch README.md

    grep -q -F "# $3" README.md || echo "# $3" >> README.md
    git add .
    git commit -am "$4"
    git remote add origin https://github.com/$1/$2.git

    # git push --set-upstream origin master
    git push -u origin master

    echo "USER is $1 and  REPO $2 DESCRIPTION $3 COMMIT_MSG $4"

  else
    echo
    echo "Illegal number of parameters"
    echo "only four args should be passed"
    echo "but you have passed $# arguments"
    echo ""
    echo "USAGE:"
    echo "gitinit gitUserName repoName description commit-msg"
    echo ""
    echo "description and commit-msg must be string"
    echo
  fi
}

# This is a clang source tree folder
# this is only useful when you are installing YouCompleteMe vim Plugin
function toggleClang() {

  if [ -d ~/.myClang ]; then
    mv ~/.myClang ~/myClang
  else
    mv ~/myClang ~/.myClang
  fi

  echo "clang folder renaming(mv) for some moment"
}


function specificUpdate() {
  for source in "$@"; do
    sudo apt-get update -o Dir::Etc::sourcelist="sources.list.d/${source}" \
      -o Dir::Etc::sourceparts="-" -o APT::Get::List-Cleanup="0"
  done
}

# http://askubuntu.com/questions/65245/apt-get-update-only-for-a-specific-repository/197532#197532
# reference
# Debian user-defined completion
_ppa_lists(){
  local cur
  _init_completion || return

  COMPREPLY=( $( find /etc/apt/sources.list.d/ -name "*$cur*.list" \
    -exec basename {} \; 2> /dev/null ) )
  return 0
} &&
  complete -F _ppa_lists specificUpdate

# I hate super user

# so use $HOME/.local folder for bin or lib
alias kvm="egrep -c '(vmx|svm)' /proc/cpuinfo"
# if results in 0, then you have no virtual machine support

PROMPT_COMMAND="history -a; $PROMPT_COMMAND" # immediately append each command to the history file
HISTSIZE=10000
HISTFILESIZE=10000
HISTCONTROL=ignoredups:ignorespace
HISTIGNORE=..:...:....:ls:l:l.:l@:la:ll:lt:cd:pwd

alias      l='ls -lah'
alias     l.='ls -ladh .[^.]*'
alias     la='ls -A'
alias     ll='ls -lh'
alias     lt='ls -ltrh'
alias     ..='cd ..'
alias    ...='cd ../..'
alias   ....='cd ../../..'
alias  .....='cd ../../../..'
alias   grep='grep -I'
alias   less='less -i'
alias    scp='scp -pr'

## remove duplicates from PATH
# PATH=$(awk -v RS=':' '{ if (!arr[$0]++) {printf("%s%s",!ln++?"":":",$0)}}' <<< $PATH)

pipAll(){
  asshole
  echo "all installed pip packages are updating"
  pip3 freeze --local | grep -v '^\-e' | cut -d = -f 1  | xargs -n1 pip3 install -U

}

alias upnext='node --v8-options | grep "in progress"'

# bin path
# ninja binary ~/.local/bin

# LLDB
# sudo apt-get install build-essential subversion swig python2.7-dev libedit-dev libncurses5-dev
# download source and
# llvm
# |
# `-- tools
#     |
#     +-- clang
#     |
#     `-- lldb
# go to llvm dir
# mkdir build ; cd build
# cmake .. -G Ninja -DCMAKE_INSTALL_PREFIX="/home/hell/Music" -DCMAKE_BUILD_TYPE=Release
# ninja build
# then copy all from ninja directory and set up as path in bin
# clang LLDB
export LLDB=~/.myLLDB
export PATH=~/.myLLDB/bin:$PATH

# LAMP
# php7 and ubuntu 16.04.1

# No vhost just bare minimum
# sudo apt-get install lamp-server^
# sudo apt-get install php-mbstring php7.0-mbstring php-gettext
# sudo apt-get install python-setuptools libapache2-mod-wsgi
# sudo apt-get install phpmyadmin
# sudo apt-get install php7.0-zip
# sudo vim /etc/apache2/apache2.conf
# add the following line at the end of file
# Include /etc/phpmyadmin/apache.conf
# restart apache2
# sudo vim  /var/www/html/testphp.php
# <? ..... ?>
# sudo chmod a+r /var/www/html/testphp.php
# sudo chown hell.users /var/www
# restart apache2

# HASSLE FREE
# sudo adduser hell www-data
# sudo chown -R www-data:www-data /var/www
# sudo chmod -R g+rwX /var/www
# vim /var/www/html/testphp.php

alias apacRestart='sudo systemctl restart apache2'

## BUILD VIM from source code
# sudo apt-get build-dep vim-gnome vim
# sudo apt-get install xorg-dev
# Install lua and perl as well
# mkdir -p ~/.myVim
# unzip vim-8.0.0000.zip
# cd vim-8.0.0000/src/
# asshole for me

# ./configure --enable-python3interp --enable-pythoninterp --enable-rubyinterp --enable-luainterp --enable-perlinterp --enable-cscope --enable-gui=gtk3 --enable-multibyte --with-features=huge --with-x --prefix=/home/hell/.myVim

# make
# make install

vimBuild(){
  echo "Fuck .. Are you in vim source directory!!"
  ./configure --enable-python3interp --enable-pythoninterp --enable-rubyinterp --enable-luainterp --enable-perlinterp --enable-cscope --enable-gui=gtk2 --enable-multibyte --with-features=huge --with-x --prefix=$HOME/.myVim
  echo "Thanks for building Vim"
  echo "then execute make and make install from current dir"
}


# latest VIM
export VIM_HOME=~/.myVim
export PATH=$VIM_HOME/bin:$PATH
unset MANPATH
export MANPATH="$VIM_HOME/share/man:$(manpath)"

alias vi='vim'

# quick open HTML5 File
# /usr/bin/google-chrome
alias goog='google-chrome'


# latest Tmux
export TMUX_HOME=~/.myTmux
export PATH=$TMUX_HOME/bin:$PATH
unset MANPATH
export MANPATH="$TMUX_HOME/share/man:$(manpath)"

# unzip tmux...
# cd tmux
# sudo apt-get build-dep tmux
# sh autogen.sh
# mkdir ~/.myTmux
# ./configure --prefix=/home/hell/.myTmux
# make
# make install


export JAVAEE_HOME=~/.myJAVAEE
export PATH=$JAVAEE_HOME/bin:$PATH

# Node Install easy

helper() {
  if [ "$#" == "1" ]; then
    echo "You entered: $1"
    rm -rf ~/.myNode
    mv $1 ~/.myNode
    node -v
    echo "done"
  fi
}

installNode () {
  if [ "$#" == "1" ]; then
    echo
    echo $PWD
    tar xvf $1
    ls
    echo "call helper"
  fi
}

wifi(){

  sudo /etc/init.d/network-manager $@
}

spotifyInstall()
{
  # 1. Add the Spotify repository signing key to be able to verify downloaded packages
  sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys BBEBDCB318AD50EC6865090613B00F1FD2C19886

  # 2. Add the Spotify repository
  echo deb http://repository.spotify.com stable non-free | sudo tee /etc/apt/sources.list.d/spotify.list
  # correct the permission
  sudo chmod a+r /etc/apt/sources.list.d/spotify.list

  # 3. Update list of available packages
  sudo apt-get update

  # 4. Install Spotify
  sudo apt-get install spotify-client

  # remove prev cache
  rm -rf ~/.cache/spotify/*

}

currentStatePID()
{
  echo 'current process ID : '$$
  echo 'current terminal state : '$?
}

myGradle()
{
  pwd
  touch build.gradle
  mkdir -p src/main/java  # Production Java source
  mkdir -p src/main/resources  # Production resources
  mkdir -p src/test/java   # Test Java source
  mkdir -p src/test/resources   # Test resources
}

# cargo for RUST

# Java Development Kit
export RUST_PAC=~/.cargo
export PATH=$RUST_PAC/bin:$PATH

# extract function
# http://stackoverflow.com/questions/17420994/bash-regex-match-string
# edited by zawad110016@acc.edu.bd

extract () {
  if [ -f $1 ] ; then
    case $1 in
      *.tar.bz2)   tar xvjf $1    ;;
      *.tar.gz)    tar xvzf $1    ;;
      *.tar.xz)    tar xvf $1     ;;
      *.bz2)       bunzip2 $1     ;;
      *.rar)       rar x $1       ;;
      *.gz)        gunzip $1      ;;
      *.tar)       tar xvf $1     ;;
      *.tbz2)      tar xvjf $1    ;;
      *.tgz)       tar xvzf $1    ;;
      *.zip)       unzip $1       ;;
      *.Z)         uncompress $1  ;;
      *.7z)        7z x $1        ;;
      *)           echo "don't know '$1'..." ;;
    esac
  else
    echo "'$1' is not a valid file!"
  fi
}

# Install build dependencies
# http://stackoverflow.com/questions/1885525/how-do-i-prompt-a-user-for-confirmation-in-bash-script
dependen(){
  if (( "$#" == "1")); then
    read -p "Are you sure to src build dependency of $1? " -n 1 -r
    echo    # (optional) move to a new line
    if [[ ! $REPLY =~ ^[Yy]$ ]]
    then
      echo "you typed $REPLY"
      echo "Ok that's fine"
    else
      sudo apt-get build-dep $1
    fi
  else
    echo "'$1' something went wrong"
  fi
}

# MANPAGER
export MANPAGER="/bin/sh -c \"col -b | vim -c 'set ft=man ts=8 nomod nolist nonu noma' -\""

export CLASSPATH=".:/home/hell/.myMYSQLjdbc/mysql-connector-java-5.1.40-bin.jar"

alias workbench='mysql-workbench'

# Android Device Bridge
export ADB=~/Android/Sdk
export PATH=$ADB/platform-tools:$PATH

# rails
rubyBuild(){
  ./configure --prefix=$HOME/.myRuby
  make install
}

# ROR
export RUBY_HOME=~/.myRuby
export PATH=$RUBY_HOME/bin:$PATH
unset MANPATH
export MANPATH="$RUBY_HOME/share/man:$(manpath)"


export PYTHON_CONFIGURE_OPTS="--enable-shared"
pythonBuild() {
  # sudo apt-get build-dep python3.6-dev

  ./configure --prefix=$HOME/.myPython --enable-shared
  make
  make install
}


export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/lib/x86_64-linux-gnu:/usr/lib:/usr/local/lib:/home/hell/.myPython/lib:/home/hell/.myClang/lib

alias pip='pip3'
# the following code to your ~/.pip/pip.conf to avoid the warning.
# [list]
# format=columns

# flask
myFlask() {

  if (( "$#" < "1")); then
    echo flask application name in args
    echo "for example, application.py which is basically filename"
  else
    echo "you provided file $@"
    export FLASK_APP=$@
    export FLASK_DEBUG=1
    echo "to run app execute 'runFlask'"
  fi
}

runFlask() {
  lsof -i :5000
  if [ $? -eq 0 ]
  then
    echo "already running a server instance in port 5000"
  else
    flask run
  fi
}

alias pdb='pdb3'

sourceListPermission(){
  sudo chmod a+r /etc/apt/sources.list.d/*
}

alias sqlite='sqlite3'

# Gives the current user ownership of the current file
# gimme file.txt
function gimme {
  chown `whoami` $1
}


# Clears the screen and adds a blank buffer on top to help you visualize.
function cleanse {
  clear && clear
}

# lists all the people who have contributed to a git repo
alias contributors="git log --format='%aN' | sort -u"


# Prints out your most-used commands
function halloffame {
  history | awk '{a[$2]++}END{for(i in a){print a[i] " " i}}' | sort -rn | head -15
}


# opens http://localhost:{port}
function localhost {
  open http://localhost:$1
}

# Sends a packet to the given website and traces its route
# journey www.harvard.edu
function journey {
  traceroute -q 1 $1
}


# moves all the files contained in subfolders of the current folder into the base level of this folder,
# emptying all subdirectories.
function flatten {
  find ./ -mindepth 2 -type f -exec mv -n '{}' ./ ';'
}

# searches for files with the given string in their names
# fname "controller"
function fname {
  find . -regex ".*$1.*"
}

# recursively changes the permissions of every file in
# the current directory to 0644 and every directory to
# 0755.
function fixperms {
  find ./ -type d -exec chmod 755 {} \;
  find ./ -type f -exec chmod 644 {} \;
}

function myPublicIP() {
  myip="$(dig +short myip.opendns.com @resolver1.opendns.com)"
  echo "My WAN/Public IP address: ${myip}"
}

pureClang() {
  asshole
  export CC=clang
  export CXX=clang++
  echo $CC
  echo $CXX
  echo $CXXFLAGS
}

piAddress(){
  cat /var/lib/misc/dnsmasq.leases
}

firmwareUpdate(){
  cd

  wget https://01.org/sites/default/files/downloads/intelr-graphics-linux/kbldmcver101.tar.bz2 && \
    tar xjvf kbldmcver101.tar.bz2 && cd kbl_dmc_ver1_01/ && sudo ./install.sh

  cd

  sudo update-initramfs -u -k all
}

# Download SDK platform tools
# remember to extract that and
# mv platform-tools ~/.platform-tools
# https://developer.android.com/studio/releases/platform-tools.html
# AndroidOS Factory Setting
# export ADB_HOME=~/.platform-tools
# export PATH=$ADB_HOME:$PATH

# Android SDK command line tools,
# requires for React-native etc
export ANDROID_HOME=${HOME}/Android/Sdk
export PATH=${PATH}:${ANDROID_HOME}/tools
export PATH=${PATH}:${ANDROID_HOME}/platform-tools


myBluetooth() {
    python3 ~/.dotMethod/bluetooth.py
}

ecmaEnvSet() {
  echo $PWD
  yarn add babel-cli babel-preset-env
  echo '{ "presets": ["env"] }' > .babelrc
}

export TERM=xterm
